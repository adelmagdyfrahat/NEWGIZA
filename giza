import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:url_launcher/url_launcher.dart';
import 'dart:math';
import 'package:intl/intl.dart';

void main() {
  runApp(const GizaServiceApp());
}

class GizaServiceApp extends StatelessWidget {
  const GizaServiceApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        fontFamily: 'Cairo', // تطبيق الخط على التطبيق بأكمله
        primaryColor: const Color(0xFF0D47A1),
        colorScheme: ColorScheme.fromSwatch().copyWith(
          secondary: const Color(0xFF1976D2),
        ),
      ),
      home: const GizaServiceScreen(),
    );
  }
}

class GizaServiceScreen extends StatefulWidget {
  const GizaServiceScreen({super.key});

  @override
  _GizaServiceScreenState createState() => _GizaServiceScreenState();
}

class _GizaServiceScreenState extends State<GizaServiceScreen> {
  final _formKey = GlobalKey<FormState>();
  String? selectedDistrict;
  String? selectedRequestType;
  final TextEditingController nameController = TextEditingController();
  final TextEditingController idController = TextEditingController();
  final TextEditingController phoneController = TextEditingController();
  final TextEditingController requestController = TextEditingController();

  final Map<String, String> districtWhatsAppNumbers = {
    "حي الدقي": "+201110532501",
    "حي العجوزة": "+201120420142",
    "حي الهرم": "+201110532501",
    "حي بولاق الدكرور": "+201110532501",
    "حي امبابة": "+201110532501",
    "حي المنيرة الغربية": "+201110532501",
    "حي الوراق": "+201110532501",
    "حي الطالبية": "+201110532501",
    "حي العمرانية": "+201110532501",
    "حي جنوب الجيزة": "+201110532501",
    "مركز ومدينة أوسيم": "+201110532501",
    "مركز ومدينة البدرشين": "+201110532501",
    "مركز ومدينة كرداسة": "+201110532501",
    "مركز ومدينة الحوامدية": "+201110532501",
    "مركز ومدينة منشأة القناطر": "+201110532501",
    "مركز ومدينة أبو النمرس": "+201110532501",
    "مركز ومدينة العياط": "+201110532501",
    "مركز ومدينة الصف": "+201110532501",
    "مركز ومدينة أطفيح": "+201110532501",
    "مركز الواحات البحرية ومدينة الباويطي": "+201110532501",
    "المركز التكنولوجي لديوان عام محافظة الجيزة": "+201004398494",
  };

  final List<String> requestTypes = ["طلب", "خدمة", "شكوى"];

  void sendRequest() async {
    if (_formKey.currentState!.validate()) {
      String date = DateFormat('yyyyMMdd').format(DateTime.now());
      String randomNum = Random().nextInt(9999).toString().padLeft(4, '0');
      String requestNumber = "$date-$randomNum";

      String message =
          "رقم الطلب: $requestNumber\n"
          "الحي/المركز: $selectedDistrict\n"
          "الاسم: ${nameController.text}\n"
          "الرقم القومي: ${idController.text}\n"
          "رقم الهاتف: ${phoneController.text}\n"
          "نوع الطلب: $selectedRequestType\n"
          "مضمون الطلب: ${requestController.text}";

      String? districtWhatsApp = districtWhatsAppNumbers[selectedDistrict];
      String adminWhatsApp = "+201027773049";

      if (districtWhatsApp != null) {
        bool districtSent = await _launchWhatsApp(districtWhatsApp, message);
        if (districtSent) {
          await Future.delayed(const Duration(seconds: 2));
          bool adminSent = await _launchWhatsApp(adminWhatsApp, message);
          if (adminSent) {
            ScaffoldMessenger.of(context).showSnackBar(
              const SnackBar(content: Text('تم إرسال الطلب بنجاح')),
            );
          } else {
            ScaffoldMessenger.of(context).showSnackBar(
              const SnackBar(content: Text('تعذر إرسال الطلب إلى الإدارة')),
            );
          }
        } else {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('تعذر إرسال الطلب إلى الحي/المركز')),
          );
        }
      }
    }
  }

  Future<bool> _launchWhatsApp(String phone, String message) async {
    final Uri url = Uri.parse(
      "https://wa.me/$phone?text=${Uri.encodeFull(message)}",
    );

    if (await canLaunchUrl(url)) {
      await launchUrl(url, mode: LaunchMode.externalApplication);
      return true;
    } else {
      return false;
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      resizeToAvoidBottomInset: true,
      appBar: AppBar(
        title: const Text(
          "الجيزة في خدمتك",
          style: TextStyle(
            fontSize: 24,
            fontWeight: FontWeight.bold,
            color: Colors.white,
          ),
        ),
        centerTitle: true,
        elevation: 5,
        backgroundColor: Theme.of(context).primaryColor,
      ),
      body: SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.all(20.0),
          child: Form(
            key: _formKey,
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                Image.asset(
                  "assets/giza_logo.png",
                  height: 120,
                  fit: BoxFit.contain,
                ),
                const SizedBox(height: 20),
                _buildDropdown(
                  hint: "اختر الحي أو المركز",
                  items: districtWhatsAppNumbers.keys.toList(),
                  onChanged:
                      (value) => setState(() => selectedDistrict = value),
                  validator:
                      (value) => value == null ? "اختر الحي أو المركز" : null,
                ),
                const SizedBox(height: 15),
                _buildTextField(
                  controller: nameController,
                  label: "اسم صاحب الطلب",
                  validator:
                      (value) => value!.isEmpty ? "يرجى إدخال الاسم" : null,
                ),
                const SizedBox(height: 15),
                _buildTextField(
                  controller: idController,
                  label: "الرقم القومي",
                  keyboardType: TextInputType.number,
                  inputFormatters: [FilteringTextInputFormatter.digitsOnly],
                  maxLength: 14,
                  validator:
                      (value) =>
                          value!.length != 14 ? "يجب أن يكون 14 رقمًا" : null,
                ),
                const SizedBox(height: 15),
                _buildTextField(
                  controller: phoneController,
                  label: "رقم الهاتف",
                  keyboardType: TextInputType.phone,
                  inputFormatters: [FilteringTextInputFormatter.digitsOnly],
                  maxLength: 11,
                  validator:
                      (value) =>
                          (value!.length != 11 || !value.startsWith("01"))
                              ? "رقم هاتف غير صالح"
                              : null,
                ),
                const SizedBox(height: 15),
                _buildDropdown(
                  hint: "اختر طبيعة الطلب",
                  items: requestTypes,
                  onChanged:
                      (value) => setState(() => selectedRequestType = value),
                  validator: (value) => value == null ? "اختر نوع الطلب" : null,
                ),
                const SizedBox(height: 15),
                _buildTextField(
                  controller: requestController,
                  label: "مضمون الطلب / الشكوى",
                  maxLines: 5,
                  maxLength: 1000,
                  validator:
                      (value) => value!.isEmpty ? "يرجى إدخال التفاصيل" : null,
                ),
                const SizedBox(height: 30),
                ElevatedButton(
                  onPressed: () {
                    showDialog(
                      context: context,
                      builder:
                          (context) => AlertDialog(
                            title: const Text(
                              "تأكيد الإرسال",
                              style: TextStyle(fontWeight: FontWeight.bold),
                            ),
                            content: const Text("هل أنت متأكد من إرسال الطلب؟"),
                            actions: [
                              TextButton(
                                onPressed: () => Navigator.pop(context),
                                child: const Text(
                                  "لا",
                                  style: TextStyle(color: Colors.red),
                                ),
                              ),
                              TextButton(
                                onPressed: () {
                                  Navigator.pop(context);
                                  sendRequest();
                                },
                                child: const Text(
                                  "نعم",
                                  style: TextStyle(color: Colors.green),
                                ),
                              ),
                            ],
                          ),
                    );
                  },
                  style: ElevatedButton.styleFrom(
                    padding: const EdgeInsets.symmetric(vertical: 15),
                    backgroundColor: Theme.of(context).primaryColor,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(10),
                    ),
                  ),
                  child: const Text(
                    "إرسال الطلب",
                    style: TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                      color: Colors.white,
                    ),
                  ),
                ),
                const SizedBox(height: 20),
                const Center(
                  child: Text(
                    "Powered by: Adel Magdy",
                    style: TextStyle(
                      color: Colors.redAccent,
                      fontSize: 14,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildDropdown({
    required String hint,
    required List<String> items,
    required Function(String?) onChanged,
    required String? Function(String?) validator,
  }) {
    return SizedBox(
      height: 60, // ارتفاع ثابت لتجنب التجاوز
      child: DropdownButtonFormField<String>(
        isExpanded: true, // تأكد من توسيع العنصر لملء المساحة المتاحة
        hint: Text(hint, style: const TextStyle(fontSize: 16)),
        items:
            items.map((item) {
              return DropdownMenuItem<String>(
                value: item,
                child: Text(item, style: const TextStyle(fontSize: 16)),
              );
            }).toList(),
        onChanged: onChanged,
        validator: validator,
        decoration: InputDecoration(
          border: OutlineInputBorder(borderRadius: BorderRadius.circular(10)),
          filled: true,
          fillColor: Colors.grey[200],
        ),
      ),
    );
  }

  Widget _buildTextField({
    required TextEditingController controller,
    required String label,
    TextInputType? keyboardType,
    List<TextInputFormatter>? inputFormatters,
    int? maxLength,
    int? maxLines,
    required String? Function(String?) validator,
  }) {
    return TextFormField(
      controller: controller,
      keyboardType: keyboardType,
      inputFormatters: inputFormatters,
      maxLength: maxLength,
      maxLines: maxLines,
      textAlign: TextAlign.right,
      style: const TextStyle(fontSize: 16),
      decoration: InputDecoration(
        labelText: label,
        border: OutlineInputBorder(borderRadius: BorderRadius.circular(10)),
        filled: true,
        fillColor: Colors.grey[200],
      ),
      validator: validator,
    );
  }
}
